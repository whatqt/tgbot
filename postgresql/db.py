import asyncpg 
from postgresql.connect import create_connection
from aiogram import Bot


bot = Bot(token="6573990032:AAGRALx8BGzMNIj1KulH8A_onrv6mKLENEw")


async def insert_into_table(id_user, user_name, id_group):
    cursor = await create_connection()
    try:
        insert_info = f'''
        INSERT INTO users VALUES ('{id_user}', '{user_name}', 'schedule_{id_group}')
        '''
        await cursor.execute(insert_info)
        print(f'–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}\nid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {id_user}\n–≥—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {id_group}')
        print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö üìù')
        await bot.send_message(
        -4149670794, 
        f'#–±–∞–∑–∞_–¥–∞–Ω–Ω—ã—Ö\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}\nid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {id_user}\n–≥—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {id_group}'
        )
    except asyncpg.exceptions.UniqueViolationError:
        print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö üìã ') 
        print(f'id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {id_user} | user_name –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}')
        selecet_from = '''
        SELECT id_user FROM users
        ''' 
        # await pool.execute(selecet_from)
        result = await cursor.fetch(selecet_from)
        for key in result:
            new_info = str(key)
            print(new_info.split(' ')[1])
            if new_info.split(' ')[1] == f'id_user={id_user}>':
                update_user_group = f'''
                UPDATE users
                SET id_group = 'schedule_{id_group}'
                WHERE id_user = {id_user}
                ''' 
                await cursor.execute(update_user_group)
                print('id –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ')
                print('\n')
                await bot.send_message(
                -4149670794, 
                f'#–±–∞–∑–∞_–¥–∞–Ω–Ω—ã—Ö\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö üìã\nid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {id_user} | user_name –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}\nid –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ'
                )     
                break
    finally:
        await cursor.close()


async def check_id_group(id_user):
    cursor = await create_connection()
    try:
        select_id_user = f'''
        SELECT id_user,
        CASE
            WHEN id_user = {id_user}
                THEN id_group
            ELSE 'No'
        END AS yes
        FROM users
        '''
        result = await cursor.fetch(select_id_user)
        for info in result:
            new_info = str(info)
            if new_info.split(' ')[1] == f'id_user={id_user}':
                return(new_info.split(' ')[2].split("'", 2)[1])
    finally:
        await cursor.close()                

async def insert_into_time(id_user, hour, minute):
    try:
        cursor = await create_connection()
        time_set = f'''
        INSERT INTO send_mess_time VALUES ('{id_user}', TIMESTAMP '{2024}-{4}-{18} {hour}:{minute}:{00}')
        '''
        await cursor.execute(time_set)
    finally:
        await cursor.close()    

async def select_time_time(id_user):
    try:
        cursor = await create_connection()
        select_from = f'''
        SELECT id_user,
        CASE
            WHEN id_user = {id_user}
                THEN time_set
            ELSE NULL
        END AS yes
        FROM send_mess_time
        '''
        result = await cursor.fetch(select_from)
        for info_time in result:
            new_info_time = str(info_time).split(' ', maxsplit=2)[2]
            if new_info_time != 'yes=None>':
                result = new_info_time.split('(')[1].split(')')[0]
                return result.replace(', ', ':')
    finally:
        await cursor.close()      

async def delete_date_time(id_user):
    try:
        cursor = await create_connection()
        delete_date = f'''
        DELETE FROM send_mess_time
            WHERE id_user = {id_user}
        '''
        await cursor.execute(delete_date)
    finally:
        await cursor.close()      



#—Å–¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–ø—Ä–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
#—Å–¥–µ–ª–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –±–¥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ—Ç–µ–ª –ø–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å –≤—Ä–µ–º—è (–º–± 1 task –∏ 2 task –±—É–¥—É—Ç –∏–º–µ—Ç—å –µ–¥–∏–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
#–¥–æ–¥–µ–ª–∞—Ç—å –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–æ—Å—Ç–∏—Ç –∫–æ–¥
# asyncio.run(insert_into_time(1151, '1009'))  
# asyncio.run(insert_into_time(1752086646, '1008'))
# asyncio.run(select_all_time(1752086646))
