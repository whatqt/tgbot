from aiogram import Router, F
from aiogram import types
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from postgresql.db import *
from func_cache.check_cache import *
from keyboard_builder.reply_keyboard import *
from handlears.current_day import CurrentDay
from handlears.score_week import *
from aiogram.filters import Command


router = Router()
bot = Bot(token="6573990032:AAGRALx8BGzMNIj1KulH8A_onrv6mKLENEw")

def emoji_number_couple(nubmer: int):
    match nubmer:
        case 1:
            return '1Ô∏è‚É£'
        case 2:
            return '2Ô∏è‚É£'
        case 3:
            return '3Ô∏è‚É£'
        case 4:
            return '4Ô∏è‚É£'
        case 5:
            return '5Ô∏è‚É£'
        
        case _:
            return nubmer
ttt = '341 –∞—É–¥. –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –ª–µ–∫ –ö–Ω—ã—à–æ–≤ –ò.–Æ. –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç'

def edited_numbers_cabinet(text: str):
    numbers_cabinet = text.split('.', 1)


def emoji_time_couple(time: str):
    match time:
        case '8:30-10:00':
            return 'üïó'
        case '10:10-11:40':
            return 'üïô'
        case '12:10-13:40':
            return 'üïõ'
        case '13:50-15:20':
            return 'üïê'
        case '15:30-17:00':
            return 'üïú'
        

async def use_for(message: types.Message, list, id_user, method): 
    numbers_couple = 0
    line = ''
    time = {1: '8:30-10:00', 2: '10:10-11:40', 3: '12:10-13:40', 4: '13:50-15:20', 5: '15:30-17:00'}
    for day in list:
        numbers_couple+=1
        if day == '':
            line += (f'{emoji_time_couple(time[numbers_couple])} <b>{time[numbers_couple]}</b> | {emoji_number_couple(numbers_couple)} –ø–∞—Ä–∞ | <i><b>–û–∫–Ω–æ</b></i>\n\n')
        else:
            day = day.split('.', 1)
            line += (f'{emoji_time_couple(time[numbers_couple])} <b>{time[numbers_couple]}</b> | {emoji_number_couple(numbers_couple)} –ø–∞—Ä–∞ | <b><u>{day[0]}</u></b>{day[1]}\n\n')  
    match method:
        case 'answer':
            await message.reply(line, parse_mode='HTML')
        case 'bot_send':
            await bot.send_message(id_user, line, parse_mode='HTML')
        case 'text':
            return line
    # list.clear()


async def display_the_schedule(id_user, message: types.Message, day, method):
    try:
        id_group = await check_id_group(id_user)
        end_list = await check(id_group, day, 1)
        match method:
            case 'text':
                info = await use_for(message, end_list.copy(), id_user, method)
                return info
            case _:
                await use_for(message, end_list.copy(), id_user, method)

    except AttributeError:
        match method:
            case 'answer':
                await message.reply('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≥—Ä—É–ø–ø—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /group')
            case 'bot_send':
                await bot.send_message(id_user, '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≥—Ä—É–ø–ø—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /group')

@router.message(F.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π')
async def schedule(message: types.Message):
    await schedule_class(message)

@router.message(F.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏')
async def await_button(message: types.Message):
    await butons(message, '–ø–µ—Ä–≤–æ–π')
    
@router.message(F.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –Ω–µ–¥–µ–ª–∏')
async def await_button(message: types.Message):
    await butons(message, '–≤—Ç–æ—Ä–æ–π')

@router.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def back_menu(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text='–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø–∞—Ä—ã'))
    builder.add(types.KeyboardButton(text='–ó–∞–≤—Ç—Ä–∞—à–Ω–∏–µ –ø–∞—Ä—ã'))
    builder.add(types.KeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π'))
    builder.adjust(2)
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',reply_markup=builder.as_markup(resize_keyboard=True))

@router.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
async def back_keyboard(message: types.Message):
    await schedule_class(message)

@router.message(F.text == '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏')
async def otvet(message: types.Message):
    await display_the_schedule(message.from_user.id, message, 'monday_one', 'answer')

@router.message(F.text == '–í—Ç–æ—Ä–Ω–∏–∫ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏')
async def otvet(message: types.Message):
    await display_the_schedule(message.from_user.id, message, 'tuesday_one', 'answer')

@router.message(F.text == '–°—Ä–µ–¥–∞ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏')
async def otvet(message: types.Message):
    await display_the_schedule(message.from_user.id, message,'wednesday_one', 'answer')

@router.message(F.text == '–ß–µ—Ç–≤–µ—Ä–≥ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏')
async def otvet(message: types.Message):
    await display_the_schedule(message.from_user.id, message, 'thursday_one', 'answer')

@router.message(F.text == '–ü—è—Ç–Ω–∏—Ü–∞ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏')
async def otvet(message: types.Message):
    await display_the_schedule(message.from_user.id, message, 'friday_one', 'answer')

@router.message(F.text == '–°—É–±–±–æ—Ç–∞ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏')
async def otvet(message: types.Message):
    await display_the_schedule(message.from_user.id, message, 'saturday_one', 'answer')

@router.message(F.text == '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤—Ç–æ—Ä–æ–π –Ω–µ–¥–µ–ª–∏')
async def otvet(message: types.Message):
    await display_the_schedule(message.from_user.id, message, 'monday_two', 'answer')

@router.message(F.text == '–í—Ç–æ—Ä–Ω–∏–∫ –≤—Ç–æ—Ä–æ–π –Ω–µ–¥–µ–ª–∏')
async def otvet(message: types.Message):
    await display_the_schedule(message.from_user.id, message, 'tuesday_two', 'answer')

@router.message(F.text == '–°—Ä–µ–¥–∞ –≤—Ç–æ—Ä–æ–π –Ω–µ–¥–µ–ª–∏')
async def otvet(message: types.Message):
    await display_the_schedule(message.from_user.id, message, 'wednesday_two', 'answer')

@router.message(F.text == '–ß–µ—Ç–≤–µ—Ä–≥ –≤—Ç–æ—Ä–æ–π –Ω–µ–¥–µ–ª–∏')
async def otvet(message: types.Message):
    await display_the_schedule(message.from_user.id, message, 'thursday_two', 'answer')

@router.message(F.text == '–ü—è—Ç–Ω–∏—Ü–∞ –≤—Ç–æ—Ä–æ–π –Ω–µ–¥–µ–ª–∏')
async def otvet(message: types.Message):
    await display_the_schedule(message.from_user.id, message, 'friday_two', 'answer')

@router.message(F.text == '–°—É–±–±–æ—Ç–∞ –≤—Ç–æ—Ä–æ–π –Ω–µ–¥–µ–ª–∏')
async def otvet(message: types.Message):
    await display_the_schedule(message.from_user.id, message, 'saturday_two', 'answer')

@router.message(F.text == '–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø–∞—Ä—ã')
async def otvet(message: types.Message):
    try:
        current_day = CurrentDay()
        info_class = await display_the_schedule(
            message.from_user.id, message,  
            await check_week(await current_day.today_day_week()), 'text'
        )
        if info_class is None:
            await message.answer('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≥—Ä—É–ø–ø—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /group')
            
        else:
            info_week = await week()
            await message.answer(f'{info_week}\n\n{info_class}', parse_mode="HTML")

    except KeyError:
        info_week = await week()
        await message.answer(f'{info_week}\n\n–í –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –ø–∞—Ä –Ω–µ—Ç!')
        
@router.message(Command('while_time'))
async def time_while(message: types.Message):
    if message.from_user.id == 1752086646:
        await while_time()

@router.message(F.text == '–ó–∞–≤—Ç—Ä–∞—à–Ω–∏–µ –ø–∞—Ä—ã')
async def tomorrow_class(message: types.Message):
    try:
        current_day = CurrentDay()
        if await current_day.today_day_week() == 6:
            info_class = await display_the_schedule(
                    message.from_user.id, message, 
                    await check_week(input_score_week=True), 'text'
                )
            if info_class is None:
                await message.answer('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≥—Ä—É–ø–ø—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /group')
                return
            else:
                info_week = await week(input_score_week=True)
                await message.answer(f'{info_week}\n\n{info_class}', parse_mode='HTML')
                return
            
        info_class = await display_the_schedule(
            message.from_user.id, message, 
            await check_week(await current_day.tomorrows_day_week()), 'text'
        )
        if info_class is None:
            await message.answer('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≥—Ä—É–ø–ø—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /group')
            
        else:
            info_week = await week()
            await message.answer(f'{info_week}\n\n{info_class}', parse_mode='HTML')

    except KeyError:
        info_week = await week()
        await message.answer(f'{info_week}\n\n–í –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –ø–∞—Ä –Ω–µ—Ç!')
    



